profiles {

    standard {

        docker {

            enabled             = true

            envWhitelist        = "SLURM_CPUS_ON_NODE"

            runOptions          = '-v "$TMPDIR":"$TMPDIR"' // For compatibility with the parallel command called by Tb-Profiler

        }

    }

    docker {

        docker {

            enabled             = true

            envWhitelist        = "SLURM_CPUS_ON_NODE"

            runOptions          = '-v "$TMPDIR":"$TMPDIR"' // For compatibility with the parallel command called by Tb-Profiler

        }
    
    }

    podman {

        podman {

            enabled             = true

            envWhitelist        = "SLURM_CPUS_ON_NODE"

            runOptions          = '-v "$TMPDIR":"$TMPDIR"' // For compatibility with the parallel command called by Tb-Profiler

        }
    
    }

    singularity {

        singularity {

            enabled             = true

            envWhitelist        = "SLURM_CPUS_ON_NODE"

            runOptions          = '-B "$TMPDIR"' // For compatibility with the parallel command called by Tb-Profiler

            autoMounts          = true

        }
    
    }

    download_refs {

        params.prep_resources   = true

        params.variant_calling  = false

    }

    variant_calling {

        params.prep_resources   = false

        params.variant_calling  = true

    }

}

process {

    executor                    = "slurm"

    clusterOptions              = "-A walter --partition notchpeak -N 1 --time=10:00:00"
        
    errorStrategy               = "ignore"
    
    withLabel: amr {

        container               = "ksw9/mtb-call:amr"

    }
    
    withLabel: download_refs {

        container               = "ksw9/mtb-call:efetch"

    }

    withLabel: kraken2 {

        container               = "ksw9/mtb-call:kraken2"

    }

    withLabel: makesummary {

        container               = "ksw9/mtb-call:trimgalore"

    }
    
    withLabel: mapping {

        container               = "ksw9/mtb-call:mapping"

    }
    
    withLabel: tb_profiler {
    
    	container               = "ksw9/mtb-call:tbprofiler"

        // errorStrategy set to "retry" to deal with random failures of TB-Profiler

        errorStrategy           = "retry"
        
        maxRetries              = 10

    }

    withLabel: trimgalore {

        container               = "ksw9/mtb-call:trimgalore"

    }

    withLabel: variantcalling {

        container               = "ksw9/mtb-call:variantcalling"

    }

}

params {
    
    // Main files/directories
    // N.B. All paths are relative to resources_dir

    resources_dir               = "/uufs/chpc.utah.edu/common/home/walter-group2/tb/mtb-call2/resources"

    reads_list                  = "input/goig.tsv"

    kraken_database_path        = "kraken_db"

    reference_fasta_path        = "refs/H37Rv.fasta"

    reference_fasta_index_path  = "refs/H37Rv.fasta.fai"

    bwa_index_path              = "bwa_index"

    bowtie_index_path           = "bowtie2_index"

    bowtie_index_prefix         = "H37Rv"

    gatk_dictionary_path        = "gatk_dictionary/H37Rv.dict"

    bed_path                    = "bed/H37Rv_ppe.bed.gz"

    bed_index_path              = "bed/H37Rv_ppe.bed.gz.tbi"

    vcf_header                  = "bed/ppe_hdr.txt"

    snpeff_dir                  = "snpEff"

    snpeff_db                   = "Mycobacterium_tuberculosis_h37rv"

    snpeff_datapath             = "snpEff/data"

    snpeff_config               = "snpEff/snpEff.config"

    // Main variables

    assembly_identifier         = "GCF_000195955.2"

    strain_name                 = "H37Rv"

    mapper                      = "bwa" // Possible values: "bwa", "bowtie2"

    run_lofreq                  = true

    seq_platform                = "illumina"

    library                     = "library1"

    vcf_filter                  = 'QUAL > 20 && QUAL != "." && DP > 5 && TYPE == "SNP"' // See scripts/filter_vcf.py for more details

    additional_vcf_filtering    = "" // Possible values: "", "--remove_extreme_depth", "--remove_extreme_qual", or "--remove_extreme_depth --remove_extreme_qual"

    ploidy                      = 1

    nextseq                     = false

    nextseq_qual_threshold      = 20
    
    vcf_variants_only           = true // If true, non-variant sites will be excluded from the vcf

    fasta_vcf_sites_only        = true // If true, sites missing from the vcf will be marked as N in the consensus fasta

    use_filtered_vcf_for_fasta  = true

}
